define({ "api": [  {    "type": "Class Component",    "url": "<Index/>",    "title": "Index.jsx",    "name": "Index",    "group": "Components",    "description": "<p>This components renders the home screen from the root URL</p>",    "success": {      "examples": [        {          "title": "Home page",          "content": "<Index/>",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./components/Index.jsx",    "groupTitle": "Components"  },  {    "type": "Class Component",    "url": "<Layout>{children}</Layout>",    "title": "Layout.jsx",    "name": "Layout",    "group": "Components",    "description": "<p>This component renders the essential components to the screen, essentially a wrapper for each html page served to the client. For example, it renders all of its children passed. The header, navigation bar and meta tags are defined here.</p>",    "success": {      "examples": [        {          "title": "page-name.js",          "content": "<Layout>\n  page content\n</Layout>",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./components/Layout.jsx",    "groupTitle": "Components"  },  {    "type": "Class Component",    "url": "<Navbar|user?/>",    "title": "Navbar.jsx",    "name": "Navbar",    "group": "Components",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "user",            "description": "<p>Currently logged in user (optional)</p>"          }        ]      }    },    "description": "<p>This components renders the navigation bar at the top of the user's screen</p>",    "success": {      "examples": [        {          "title": "Layout.jsx",          "content": "<Navbar user={this.state.user} />",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./components/Navbar.jsx",    "groupTitle": "Components"  },  {    "type": "Class Component",    "url": "<SearchBar|classProp/>",    "title": "search/SearchBar.jsx",    "name": "SearchBar",    "group": "Components",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "classProp",            "description": "<p>Classes to pass down to the search bar component</p>"          }        ]      }    },    "description": "<p>This components renders the search bar and invisible search table</p>",    "success": {      "examples": [        {          "title": "Navbar.jsx",          "content": "<SearchBar/>",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./components/search/SearchBar.jsx",    "groupTitle": "Components"  },  {    "type": "Class Component",    "url": "<SearchTable|result|authorised|showTable/>",    "title": "search/searchTable.jsx",    "name": "SearchTable",    "group": "Components",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Object[]",            "optional": false,            "field": "result",            "description": "<p>Results of the track search from the server</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": false,            "field": "authorised",            "description": "<p>A boolean value whether the queue has Spotify authorised</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": false,            "field": "showTable",            "description": "<p>A boolean value whether the table should be displayed or hidden</p>"          }        ]      }    },    "description": "<p>This components renders the search bar and invisible search table</p>",    "success": {      "examples": [        {          "title": "SearchTable.jsx",          "content": "<SearchTable \n  result={\n    { complex object ... },\n    { complex object ... }}\n  authorised={true}\n  showTable={true}/>",          "type": "json"        }      ]    },    "version": "0.0.0",    "filename": "./components/search/SearchTable.jsx",    "groupTitle": "Components"  },  {    "type": "get",    "url": "/api/songs/:id",    "title": "DELETE Song",    "name": "DeleteQueue",    "group": "Queue",    "description": "<p>Deletes a song from the queue with the given ID in the URL body</p>",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "body",            "description": "<p>The song that has been successfully deleted</p>"          }        ]      }    },    "error": {      "fields": {        "404": [          {            "group": "404",            "optional": false,            "field": "BadRequest",            "description": "<p>The song with the given ID wasn't found</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/songs.js",    "groupTitle": "Queue"  },  {    "type": "get",    "url": "/api/songs/",    "title": "GET Songs",    "name": "GetQueue",    "group": "Queue",    "description": "<p>Gets all songs in the queue, filters the first N songs by time, then the rest by priority. Updates the song's priorty on each call.</p>",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "body",            "description": "<p>list of all songs in the current queue</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/songs.js",    "groupTitle": "Queue"  },  {    "type": "get",    "url": "/api/songs/",    "title": "POST Song",    "name": "PostQueue",    "group": "Queue",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "requestedBy",            "description": "<p>User ID of the user who requested the song</p>"          },          {            "group": "Parameter",            "type": "Object",            "optional": false,            "field": "song",            "description": "<p>Object of the song received from Spotify</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "username",            "description": "<p>Username of the user who requested the song</p>"          }        ]      }    },    "description": "<p>Adds a new song to the current queue. Adds the current logged in user and assigns the user priority to the song priority</p>",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "body",            "description": "<p>The song that has successfully been added to the queue</p>"          }        ]      }    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "InvalidBody",            "description": "<p>Validation error details</p>"          }        ],        "404": [          {            "group": "404",            "optional": false,            "field": "UserNotFound",            "description": "<p>The current logged in user was not found</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/songs.js",    "groupTitle": "Queue"  },  {    "type": "get",    "url": "/api/spotify/alexa",    "title": "Search & Add Track Alexa",    "name": "SpotifyAlexaTrack",    "group": "Spotify",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "query",            "description": "<p>Keyword to be used to search Spotify</p>"          }        ]      }    },    "description": "<p>This endpoint selects the top track from a search with they input query. Then this result is added to the queue</p>",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "returns",            "description": "<p>the response object from the Spotify call</p>"          }        ]      }    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "SpotifyError",            "description": "<p>Spotify error message</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/spotify.js",    "groupTitle": "Spotify"  },  {    "type": "get",    "url": "/api/spotify/features/:id",    "title": "Get Audio Features",    "name": "SpotifyAudioFeatures",    "group": "Spotify",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>ID of the track to get audio features from</p>"          }        ]      }    },    "description": "<p>This endpoint gets the audio features of the tracks i.e. acousticness, energy etc.</p>",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "returns",            "description": "<p>the response object from the Spotify call</p>"          }        ]      }    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "SpotifyError",            "description": "<p>Spotify error message</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/spotify.js",    "groupTitle": "Spotify"  },  {    "type": "get",    "url": "/api/spotify/getMe",    "title": "Get Authorised User",    "name": "SpotifyAuthorisedUser",    "group": "Spotify",    "description": "<p>This endpoint plays the track with the given</p>",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "returns",            "description": "<p>the response object from the Spotify call</p>"          }        ]      }    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "SpotifyError",            "description": "<p>Spotify error message</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/spotify.js",    "groupTitle": "Spotify"  },  {    "type": "get",    "url": "/api/spotify/getCurrent",    "title": "Get Track",    "name": "SpotifyGetTrack",    "group": "Spotify",    "description": "<p>This endpoint gets the currently playing track on the authorised user</p>",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "returns",            "description": "<p>the response object from the Spotify call</p>"          }        ]      }    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "SpotifyError",            "description": "<p>Spotify error message</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/spotify.js",    "groupTitle": "Spotify"  },  {    "type": "get",    "url": "/api/spotify/login",    "title": "Authorise Spotify",    "name": "SpotifyLogin",    "group": "Spotify",    "description": "<p>Creates the authorisation URL for Spotify which allows you to retrieve a token</p>",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "undefined",            "optional": false,            "field": "null",            "description": "<p>redirect to Spotify Authorisation Grant</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/spotify.js",    "groupTitle": "Spotify"  },  {    "type": "get",    "url": "/api/spotify/pause",    "title": "Pause Track",    "name": "SpotifyPauseTrack",    "group": "Spotify",    "description": "<p>This endpoint simply pauses the track that is currently playing</p>",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "returns",            "description": "<p>the response object from the Spotify call</p>"          }        ]      }    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "SpotifyError",            "description": "<p>Spotify error message</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/spotify.js",    "groupTitle": "Spotify"  },  {    "type": "get",    "url": "/api/spotify/resume/:uri",    "title": "Resume Track",    "name": "SpotifyResumeTrack",    "group": "Spotify",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "uri",            "description": "<p>Resume a paused track given the Spotify URI</p>"          }        ]      }    },    "description": "<p>This endpoint resumes a track given its URI</p>",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "returns",            "description": "<p>the response object from the Spotify call</p>"          }        ]      }    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "SpotifyError",            "description": "<p>Spotify error message</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/spotify.js",    "groupTitle": "Spotify"  },  {    "type": "get",    "url": "/api/spotify/volume/:newVolume",    "title": "Set Volume",    "name": "SpotifySetVolume",    "group": "Spotify",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "Number",            "optional": false,            "field": "newVolume",            "description": "<p>New volume to set Spotify</p>"          }        ]      }    },    "description": "<p>This endpoint resumes a track given its URI</p>",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "returns",            "description": "<p>the response object from the Spotify call</p>"          }        ]      }    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "SpotifyError",            "description": "<p>Spotify error message</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/spotify.js",    "groupTitle": "Spotify"  },  {    "type": "get",    "url": "/api/spotify/start/:uri",    "title": "Start Track",    "name": "SpotifyStartTrack",    "group": "Spotify",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "uri",            "description": "<p>URI of the song to be played</p>"          }        ]      }    },    "description": "<p>This endpoint plays the track with the given</p>",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "returns",            "description": "<p>the response object from the Spotify call</p>"          }        ]      }    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "SpotifyError",            "description": "<p>Spotify error message</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/spotify.js",    "groupTitle": "Spotify"  },  {    "type": "get",    "url": "/api/spotify/search/:query",    "title": "Search Track",    "name": "SpotifyTrackSearch",    "group": "Spotify",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "query",            "description": "<p>Keyword to search for the songs using Spotify</p>"          }        ]      }    },    "description": "<p>Searches for a track given the query parameter. If no tracks are found, then an error is sent.</p>",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object[]",            "optional": false,            "field": "data",            "description": "<p>The top songs (max 20) matching the query</p>"          }        ]      }    },    "error": {      "fields": {        "Error 4xx": [          {            "group": "Error 4xx",            "optional": false,            "field": "SpotifyError",            "description": "<p>Spotify error message</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/spotify.js",    "groupTitle": "Spotify"  },  {    "type": "delete",    "url": "/api/user/me",    "title": "DELETE User",    "name": "DeleteUser",    "group": "User",    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "User",            "description": "<p>that was deleted</p>"          }        ]      }    },    "error": {      "fields": {        "404": [          {            "group": "404",            "optional": false,            "field": "NotFound",            "description": "<p>The user with the given ID was not found</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/users.js",    "groupTitle": "User"  },  {    "type": "get",    "url": "/api/user/:id",    "title": "GET User",    "name": "GetUser",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "id",            "description": "<p>Users unique ID</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "body",            "description": "<p>User information without sensitive data</p>"          }        ]      }    },    "error": {      "fields": {        "404": [          {            "group": "404",            "optional": false,            "field": "NoUserFound",            "description": "<p>No user found with the given ID</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/users.js",    "groupTitle": "User"  },  {    "type": "post",    "url": "/api/user/login",    "title": "LOGIN User",    "name": "LoginUser",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "username",            "description": "<p>User inputted username</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>User inputted password</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "JSON",            "description": "<p>Web Token</p>"          }        ]      }    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "InvalidBody",            "description": "<p>Validation error details</p>"          },          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>Incorrect username or password</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/users.js",    "groupTitle": "User"  },  {    "type": "post",    "url": "/api/user/",    "title": "POST User",    "name": "PostUser",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "username",            "description": "<p>User inputted username</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>User inputted password</p>"          },          {            "group": "Parameter",            "type": "Boolean",            "optional": false,            "field": "isDevice",            "description": "<p>Is the account a device account or not</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "JSON",            "description": "<p>Web Token</p>"          }        ]      }    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "InvalidBody",            "description": "<p>Validation error details</p>"          },          {            "group": "400",            "optional": false,            "field": "BadRequest",            "description": "<p>User is already registered</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/users.js",    "groupTitle": "User"  },  {    "type": "put",    "url": "/api/user/me",    "title": "UPDATE User",    "name": "PutUser",    "group": "User",    "parameter": {      "fields": {        "Parameter": [          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "username",            "description": "<p>Username of the current user</p>"          },          {            "group": "Parameter",            "type": "String",            "optional": false,            "field": "password",            "description": "<p>New password for the user</p>"          }        ]      }    },    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "type": "Object",            "optional": false,            "field": "User",            "description": "<p>insensitive information</p>"          }        ]      }    },    "error": {      "fields": {        "400": [          {            "group": "400",            "optional": false,            "field": "InvalidBody",            "description": "<p>validation error details</p>"          }        ],        "404": [          {            "group": "404",            "optional": false,            "field": "NotFound",            "description": "<p>The user with the given ID was not found</p>"          }        ]      }    },    "version": "0.0.0",    "filename": "./routes/users.js",    "groupTitle": "User"  },  {    "success": {      "fields": {        "Success 200": [          {            "group": "Success 200",            "optional": false,            "field": "varname1",            "description": "<p>No type.</p>"          },          {            "group": "Success 200",            "type": "String",            "optional": false,            "field": "varname2",            "description": "<p>With type.</p>"          }        ]      }    },    "type": "",    "url": "",    "version": "0.0.0",    "filename": "./docs/main.js",    "group": "_Users_piercemorris_Documents_BJSSOfficeJukebox_docs_main_js",    "groupTitle": "_Users_piercemorris_Documents_BJSSOfficeJukebox_docs_main_js",    "name": ""  }] });
